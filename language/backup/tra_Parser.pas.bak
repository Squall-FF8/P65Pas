//Parser unit
ER_NOT_IMPLEM_ := trans('Not implemented: "%s"'       , 'No implementado: "%s"'         ,'',
                        'Nicht implementiert: "%s"'   ,'Не впроваджено: "%s"','Не реализовано: "%s"', 'Non implémenté : "%s"');
ER_DUPLIC_IDEN := trans('Duplicated identifier: "%s"' , 'Identificador duplicado: "%s"' ,'',
                        'Doppelter Platzhalter: "%s"' ,'Дубльований ідентифікатор: "%s"','Дублированный идентификатор: "%s"', 'Identifiant à double : "%s"');
ER_UNDEF_TYPE_ := trans('Undefined type "%s"'         , 'Tipo "%s" no definido.'        ,'',
                        'Undefinierter Typ "%s"'      , 'Невизначений тип "%s"','Неопределённый тип "%s"', 'Type indéfini "%s"');
ER_SEMIC_EXPEC  := trans('";" expected.'              , 'Se esperaba ";"', '',
                         '', '', '', '');
ER_STR_EXPECTED := trans('"%s" expected.'             , 'Se esperaba "%s"', '',
                         '', '', '', '');
ER_TYP_PARM_ER_ := trans('Type parameters error on %s', 'Error en tipo de parámetros de %s', '',
                         '', '', '', '');
ER_UNKNOWN_IDE_ := trans('Unknown identifier: %s'     , 'Identificador desconocido: %s', '',
                         '', '', '', '');
ER_IN_EXPRESSI  := trans('Error in expression. ")" expected.', 'Error en expresión. Se esperaba ")"', '',
                         '', '', '', '');
ER_OPERAN_EXPEC := trans('Operand expected.'          , 'Se esperaba operando.', '',
                         '', '', '', '');
ER_ILLEG_OPERA_ := trans('Illegal Operation: %s'      , 'Operación no válida: %s', '',
                         '', '', '', '');
ER_UND_OPER_TY_ := trans('Undefined operator: %s for type: %s', 'No está definido el operador: %s para tipo: %s', '',
                         '', '', '', '');
ER_CAN_AP_OPER_ := trans('Cannot apply the operator "%s" to type "%s"', 'No se puede aplicar el operador "%s" al tipo "%s"', '',
                         '', '', '', '');
ER_IN_CHARACTER := trans('Error in character.'        , '', '',
                         '', '', '', '');
ER_INV_COD_CHAR := trans('Invalid code for char.'     , '', '',
                         '', '', '', '');

